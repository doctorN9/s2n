import "cork-uncork.cry";
import "s2n_advance_message.cry";
c_code <- llvm_load_module "s2n.bc";

let setup_handshake prefix = do {
   let dot_concat f = str_concat prefix (str_concat "." f);
   handshake_type <- llvm_var (dot_concat "handshake_type") (llvm_int 32);
   message_number <- llvm_var (dot_concat "message_number") (llvm_int 32);
   return {{ {handshake_type = handshake_type
             ,message_number = message_number
             }
	  }};
};

let setup_connection prefix = do {
   llvm_ptr prefix (llvm_struct "struct.s2n_connection");
   let arrow_concat f = str_concat prefix (str_concat "->" f);
   corked_io <- llvm_var (arrow_concat "corked_io") (llvm_int 32);
   mode <- llvm_var (arrow_concat "mode") (llvm_int 32);
   corked <- llvm_var (arrow_concat "corked") (llvm_int 32);
   handshake <- setup_handshake (arrow_concat "handshake");
   //send_io_ctx <- llvm_ptr (arrow_concat "send_io_context") (llvm_struct "struct.s2n_socket_read_io_context");
   //fd <- llvm_var (arrow_concat "send_io_context->0") (llvm_int 32);
   return {{ {corked_io = corked_io
             ,mode      = mode
             ,handshake = handshake
	     ,corked    = corked
             }
          }}; 
};

let s2n_advance_message_spec = do {
    conn <- setup_connection "conn";
    llvm_assert_eq "conn->mode" {{ 0 : [32] }}; //we assume Server mode
    llvm_assert_eq "conn->corked_io" {{ 1 : [32] }};
    llvm_assert {{ valid_handshake conn.handshake }};

    llvm_ensure_eq "conn->corked" {{ (s2n_advance_message conn).corked }};
    llvm_ensure_eq "conn->corked_io" {{ (s2n_advance_message conn).corked_io }};
    llvm_ensure_eq "conn->mode" {{ (s2n_advance_message conn).mode }};
    llvm_ensure_eq "conn->handshake.handshake_type" {{ (s2n_advance_message conn).handshake.handshake_type }};
    llvm_ensure_eq "conn->handshake.message_number" {{ (s2n_advance_message conn).handshake.message_number }};

    llvm_return {{ 0 : [32] }};

    llvm_verify_tactic z3;
};

let s2n_socket_write_uncork_spec = do {
   setup_connection "conn";

   llvm_return {{ 0 : [32] }};
   
   llvm_ensure_eq "conn->corked" {{ 0 : [32] }};

   llvm_verify_tactic z3;
   llvm_no_simulate;
};

let s2n_socket_write_cork_spec = do {
   setup_connection "conn";

   llvm_return {{ 0 : [32] }};
   
   llvm_ensure_eq "conn->corked" {{ 1 : [32] }};

   llvm_verify_tactic z3;
   llvm_no_simulate;
};

let s2n_socket_was_corked_spec = do {
   setup_connection "conn";
   llvm_return {{ 0 : [32] }};

   llvm_verify_tactic z3;
   llvm_no_simulate;
};

let s2n_connection_is_managed_corked_spec = do {
   setup_connection "s2n_connection";
   llvm_return {{ 1 : [32] }};

   llvm_verify_tactic z3;
   llvm_no_simulate;
};


let verify_cork_uncork = do {
    s2n_socket_write_uncork_ov <- llvm_verify c_code "s2n_socket_write_uncork" [] s2n_socket_write_uncork_spec;
    s2n_socket_write_cork_ov <- llvm_verify c_code "s2n_socket_write_cork" [] s2n_socket_write_cork_spec;
    s2n_socket_was_corked_ov <- llvm_verify c_code "s2n_socket_was_corked" [] s2n_socket_was_corked_spec;
    s2n_connection_is_managed_corked_ov <- llvm_verify c_code "s2n_connection_is_managed_corked" [] s2n_connection_is_managed_corked_spec;

    s2n_advance_message_proof <- llvm_verify c_code "s2n_advance_message" [s2n_socket_write_uncork_ov, s2n_socket_write_cork_ov, s2n_socket_was_corked_ov, s2n_connection_is_managed_corked_ov] s2n_advance_message_spec;
    print "Done!";
};


verify_cork_uncork; //prove correspondence of the C code and the low-level model
prove abc {{ highLevelSimulatesLowLevel }}; //prove correspondence of the high-level and low-level models