module s2n_advance_message where
import Cryptol::Extras

type connection = {handshake : handshake
                  ,mode : [32]
                  ,corked_io : [32]
                  ,corked : [32]
                  }

type corking = [32]

type handshake = {handshake_type : [32]
                 ,message_number : [32]
                 }

ACTIVE_MESSAGE : connection -> [32]
ACTIVE_MESSAGE conn = (handshakes @ (conn.handshake.handshake_type))
                                  @ (conn.handshake.message_number)

PREVIOUS_MESSAGE : connection -> [32]
PREVIOUS_MESSAGE conn = (handshakes @ (conn.handshake.handshake_type))
                                    @ (conn.handshake.message_number - 1)

ACTIVE_STATE : connection -> handshake_action
ACTIVE_STATE conn = state_machine @ (ACTIVE_MESSAGE conn)

PREVIOUS_STATE : connection -> handshake_action
PREVIOUS_STATE conn = state_machine @ (PREVIOUS_MESSAGE conn)

conn_test : connection
conn_test = {handshake = {handshake_type = (NEGOTIATED || FULL_HANDSHAKE)
                         ,message_number = 0 //SERVER_HELLO_DONE
                         }
            ,mode = S2N_SERVER
            ,corked_io = 1
            ,corked = 1
            }

test1 = (ACTIVE_STATE conn_test).writer

test2 = ACTIVE_MESSAGE conn_test

test3 = s2n_advance_message conn_test

mode_writer : [32] -> [8]
mode_writer m = if m == S2N_SERVER then 'S' else 'C'

s2n_cork : connection -> [32]
s2n_cork c = 1

s2n_uncork : connection -> [32]
s2n_uncork c = 0

s2n_advance_message : connection -> connection
s2n_advance_message conn = conn2
  where conn2 = {handshake = handshake2
                ,mode = conn.mode
                ,corked_io = conn.corked_io
                ,corked = cork2
                }
        (handshake2 : handshake) = {handshake_type = conn.handshake.handshake_type
                                   ,message_number = conn.handshake.message_number + 1
                                   }
        cork2 = if ((ACTIVE_STATE conn2).writer != (PREVIOUS_STATE conn2).writer)
                then if (ACTIVE_STATE conn2).writer == mode_writer conn2.mode
                     then  s2n_cork conn else s2n_uncork conn
                else conn.corked

type handshake_action = {record_type : [8]
                        ,message_type : [8]
                        ,writer : [8]
                        }

mkAct : [8] -> [8] -> [8] -> handshake_action
mkAct r m w = {record_type = r, message_type = m, writer = w}

state_machine : [16]handshake_action
state_machine = [state_machine_fn m | m <- [0..15]]

state_machine_fn : [4] -> handshake_action
state_machine_fn m =
   if      m == CLIENT_HELLO then mkAct TLS_HANDSHAKE TLS_CLIENT_HELLO 'C'
   else if m == SERVER_HELLO then mkAct TLS_HANDSHAKE TLS_SERVER_HELLO 'S'
   else if m == SERVER_NEW_SESSION_TICKET then mkAct TLS_HANDSHAKE TLS_SERVER_NEW_SESSION_TICKET 'S'
   else if m == SERVER_CERT then mkAct TLS_HANDSHAKE TLS_SERVER_CERT 'S'
   else if m == SERVER_CERT_STATUS then mkAct TLS_HANDSHAKE TLS_SERVER_CERT_STATUS 'S'
   else if m == SERVER_KEY then mkAct TLS_HANDSHAKE TLS_SERVER_KEY 'S'
   else if m == SERVER_CERT_REQ then mkAct TLS_HANDSHAKE TLS_SERVER_CERT_REQ 'S'
   else if m == SERVER_HELLO_DONE then mkAct TLS_HANDSHAKE TLS_SERVER_HELLO_DONE 'S'
   else if m == CLIENT_CERT then mkAct TLS_HANDSHAKE TLS_CLIENT_CERT 'C'
   else if m == CLIENT_KEY then mkAct TLS_HANDSHAKE TLS_CLIENT_KEY 'C'
   else if m == CLIENT_CERT_VERIFY then mkAct TLS_HANDSHAKE TLS_CLIENT_CERT_VERIFY 'C'
   else if m == CLIENT_CHANGE_CIPHER_SPEC then mkAct TLS_CHANGE_CIPHER_SPEC 0 'C'
   else if m == CLIENT_FINISHED then mkAct TLS_HANDSHAKE TLS_CLIENT_FINISHED 'C'
   else if m == SERVER_CHANGE_CIPHER_SPEC then mkAct TLS_CHANGE_CIPHER_SPEC 0 'S'
   else if m == SERVER_FINISHED then mkAct TLS_HANDSHAKE TLS_SERVER_FINISHED 'S'
   else if m == APPLICATION_DATA then mkAct TLS_APPLICATION_DATA 0 'B'
   else zero

handshakes : [64][16][32]
handshakes = [handshakes_fn h | h <- [0..63]]

handshakes_fn : [32] -> [16][32]
handshakes_fn handshk =
   if handshk == INITIAL then [CLIENT_HELLO, SERVER_HELLO] # zero else
   if handshk == (NEGOTIATED || RESUME) then [CLIENT_HELLO, SERVER_HELLO, SERVER_CHANGE_CIPHER_SPEC, SERVER_FINISHED, CLIENT_CHANGE_CIPHER_SPEC, CLIENT_FINISHED, APPLICATION_DATA] # zero else
   if handshk == (NEGOTIATED || WITH_SESSION_TICKET) then [CLIENT_HELLO, SERVER_HELLO, SERVER_NEW_SESSION_TICKET, SERVER_CHANGE_CIPHER_SPEC, SERVER_FINISHED, CLIENT_CHANGE_CIPHER_SPEC, CLIENT_FINISHED, APPLICATION_DATA] # zero else
   if handshk == (NEGOTIATED || FULL_HANDSHAKE) then [CLIENT_HELLO, SERVER_HELLO, SERVER_CERT, SERVER_HELLO_DONE, CLIENT_KEY, CLIENT_CHANGE_CIPHER_SPEC, CLIENT_FINISHED, SERVER_CHANGE_CIPHER_SPEC, SERVER_FINISHED, APPLICATION_DATA] # zero else
   if handshk == (NEGOTIATED || FULL_HANDSHAKE || WITH_SESSION_TICKET) then [CLIENT_HELLO, SERVER_HELLO, SERVER_CERT, SERVER_HELLO_DONE, CLIENT_KEY, CLIENT_CHANGE_CIPHER_SPEC, CLIENT_FINISHED, SERVER_NEW_SESSION_TICKET, SERVER_CHANGE_CIPHER_SPEC, SERVER_FINISHED, APPLICATION_DATA] # zero else
   if handshk == (NEGOTIATED || FULL_HANDSHAKE || PERFECT_FORWARD_SECRECY) then [CLIENT_HELLO, SERVER_HELLO, SERVER_CERT, SERVER_KEY, SERVER_HELLO_DONE, CLIENT_KEY, CLIENT_CHANGE_CIPHER_SPEC, CLIENT_FINISHED, SERVER_CHANGE_CIPHER_SPEC, SERVER_FINISHED, APPLICATION_DATA] # zero else
   if handshk == (NEGOTIATED || FULL_HANDSHAKE || PERFECT_FORWARD_SECRECY || WITH_SESSION_TICKET) then [CLIENT_HELLO, SERVER_HELLO, SERVER_CERT, SERVER_KEY,
     SERVER_HELLO_DONE, CLIENT_KEY, CLIENT_CHANGE_CIPHER_SPEC, CLIENT_FINISHED,
     SERVER_NEW_SESSION_TICKET, SERVER_CHANGE_CIPHER_SPEC, SERVER_FINISHED, APPLICATION_DATA] # zero else
   if handshk == (NEGOTIATED || OCSP_STATUS) then [CLIENT_HELLO, SERVER_HELLO, SERVER_CERT, SERVER_CERT_STATUS,
     SERVER_HELLO_DONE, CLIENT_KEY, CLIENT_CHANGE_CIPHER_SPEC, CLIENT_FINISHED,
     SERVER_CHANGE_CIPHER_SPEC, SERVER_FINISHED, APPLICATION_DATA] # zero else
   if handshk == (NEGOTIATED || OCSP_STATUS || WITH_SESSION_TICKET) then [CLIENT_HELLO, SERVER_HELLO, SERVER_CERT, SERVER_CERT_STATUS,
     SERVER_HELLO_DONE, CLIENT_KEY, CLIENT_CHANGE_CIPHER_SPEC, CLIENT_FINISHED,
     SERVER_NEW_SESSION_TICKET, SERVER_CHANGE_CIPHER_SPEC, SERVER_FINISHED, APPLICATION_DATA] # zero else
   if handshk == (NEGOTIATED || FULL_HANDSHAKE || PERFECT_FORWARD_SECRECY || OCSP_STATUS) then [CLIENT_HELLO, SERVER_HELLO, SERVER_CERT, SERVER_CERT_STATUS,
     SERVER_KEY, SERVER_HELLO_DONE, CLIENT_KEY, CLIENT_CHANGE_CIPHER_SPEC,
     CLIENT_FINISHED, SERVER_CHANGE_CIPHER_SPEC, SERVER_FINISHED, APPLICATION_DATA] # zero else
   if handshk == (NEGOTIATED || FULL_HANDSHAKE || PERFECT_FORWARD_SECRECY || OCSP_STATUS || WITH_SESSION_TICKET) then [CLIENT_HELLO, SERVER_HELLO, SERVER_CERT, SERVER_CERT_STATUS,
     SERVER_KEY, SERVER_HELLO_DONE, CLIENT_KEY, CLIENT_CHANGE_CIPHER_SPEC, CLIENT_FINISHED, 
     SERVER_NEW_SESSION_TICKET, SERVER_CHANGE_CIPHER_SPEC, SERVER_FINISHED, APPLICATION_DATA] # zero
   else zero  

valid_handshake : handshake -> Bit
valid_handshake hs = (handshakes_fn hs.handshake_type) != zero /\
                     (implies (hs.message_number > 0) ((handshakes_fn hs.handshake_type)@(hs.message_number + 1) != 0))

implies : Bit -> Bit -> Bit
implies l r = if r then True else ~l



INITIAL : [32]
INITIAL =  zero # 0x00 
NEGOTIATED : [32]
NEGOTIATED = zero #  0x01
RESUME : [32]
RESUME = zero # 0x01
FULL_HANDSHAKE : [32]
FULL_HANDSHAKE = zero # 0x02
PERFECT_FORWARD_SECRECY : [32]
PERFECT_FORWARD_SECRECY= zero # 0x04
OCSP_STATUS : [32]
OCSP_STATUS = zero # 0x08
WITH_SESSION_TICKET : [32]
WITH_SESSION_TICKET = zero # 0x20

CLIENT_HELLO = 0
SERVER_HELLO = 1
SERVER_CERT = 2
SERVER_NEW_SESSION_TICKET = 3
SERVER_CERT_STATUS = 4
SERVER_KEY = 5
SERVER_CERT_REQ = 6
SERVER_HELLO_DONE = 7
CLIENT_CERT = 8
CLIENT_KEY = 9
CLIENT_CERT_VERIFY = 10
CLIENT_CHANGE_CIPHER_SPEC = 11
CLIENT_FINISHED = 12
SERVER_CHANGE_CIPHER_SPEC = 13
SERVER_FINISHED = 14
APPLICATION_DATA = 15

TLS_CHANGE_CIPHER_SPEC = 20
TLS_ALERT = 21
TLS_HANDSHAKE = 22
TLS_APPLICATION_DATA = 23


TLS_HELLO_REQUEST = 0
TLS_CLIENT_HELLO  = 1
TLS_SERVER_HELLO  = 2
TLS_SERVER_NEW_SESSION_TICKET = 4
TLS_SERVER_CERT               = 11
TLS_SERVER_KEY                = 12
TLS_SERVER_CERT_REQ           = 13
TLS_SERVER_HELLO_DONE         = 14
TLS_CLIENT_CERT               = 11
TLS_CLIENT_CERT_VERIFY        = 15
TLS_CLIENT_KEY                = 16
TLS_CLIENT_FINISHED           = 20
TLS_SERVER_FINISHED           = 20  /* Same as CLIENT_FINISHED */
TLS_SERVER_CERT_STATUS        = 22

S2N_SERVER = 0
S2N_CLIENT = 1